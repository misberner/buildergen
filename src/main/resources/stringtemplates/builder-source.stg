// Copyright (c) 2013 by Malte Isberner (https://github.com/misberner).
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

builder_source(spec) ::= <<
<header(spec)>

<package_decl(spec.packageName)>

<class_defn(spec)>
>>


header(spec) ::= <<
/*
 * Automatically generated by BuilderGen, https://github.com/misberner/buildergen.
 * DO NOT EDIT THIS FILE! Your changes will be overwritten.
 * Edit the @GenerateBuilder specification of class
 * <spec.instanceType>
 */
>>

package_decl(pkgName) ::= <<
<if(pkgName)>package <pkgName>;<endif>
>>

class_defn(spec) ::= <<
<if(spec.classPublic)>public <endif><if(spec.classFinal)>final <endif>class <spec.name><generic_params(spec)> {

	<create_dispatch_defn(spec)>

	<spec.options:{opt | <option_defn(opt)>}; separator="\n">
	
	<ctor_defn(spec)>
	
	<create_defn(spec)>
	
	<spec.options:{opt | <option_methods(opt, spec)> }; separator="\n\n">
	
}
>>

generic_params(spec) ::= <<
<if(spec.typeParameters)>\<
		<spec.typeParameters:{t |<type_parameter(t)>}; separator=",\n">\><endif>
>>

generic_param_names(spec) ::= <<
<if(spec.typeParameters)>\<<spec.typeParameters; separator=", ">\><endif>
>>

type_parameter(t) ::= <<
<t><if(t.bounds)> extends <t.bounds; separator=" & "><endif>
>>

option_defn(opt) ::= <<
<opt.visibility><opt.type> <opt.name>;
>>

ctor_defn(spec) ::= <<
public <spec.name>(<ctor_params(spec)>) {
	<spec.options:{opt | <option_init(opt)>}; separator="\n">
}
>>

ctor_params(spec) ::= <<
<spec.optionsForInstantiation:{opt | <opt.type> <opt.name>}; separator=", ">
>>

option_init(opt) ::= <<
<if(opt.defaultExpr)>this.<opt.name> = <opt.defaultExpr>;<endif>
>>

create_dispatch_defn(spec) ::= <<
private static<generic_params(spec)> <spec.instanceType; format="TypeMirror"> $createDispatch(
	<spec.options:{opt | <opt.type> <opt.name>}; separator=",\n">
	) <throws_decl(spec.instantiator.thrownTypes)>{
	return <spec.createInvocation>(
		<spec.options:{opt | <opt.name>}; separator=",\n">
		);
}
>>

throws_decl(types) ::= <<
<if(types)>throws <types:{t |<t>}; separator=",\n"> <endif>
>>


create_defn(spec) ::= <<
public <spec.instanceType; format="TypeMirror"> <spec.createName>(<create_params(spec)>) <throws_decl(spec.instantiator.thrownTypes)>{
	return $createDispatch(
		<spec.options:{opt | <opt.name>}; separator=",\n">
		);
}
>>

create_params(spec) ::= <<
<spec.optionsForCreation:{opt | <opt.type> <opt.name>}; separator=", ">
>>


option_methods(opt, spec) ::= <<
<if(opt.getterName)><getter(opt)><endif>
<if(opt.setterName)><setter(opt)><endif>
<if(opt.withName)><with(opt, spec)><endif>
>>

getter(opt) ::= <<
public <opt.type> <opt.getterName>() {
	return this.<opt.name>;
}
>>

setter(opt) ::= <<
public void <opt.setterName>(<opt.type> <opt.name>) {
	this.<opt.name> = <opt.name>;
}
>>

with(opt, spec) ::= <<
public <spec.name><generic_param_names(spec)> <opt.withName>(<opt.type> <opt.name>) {
	this.<opt.name> = <opt.name>;
	return this;
}
>>
