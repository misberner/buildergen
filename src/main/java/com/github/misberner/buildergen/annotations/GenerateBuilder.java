/*
 * Copyright (c) 2013 by Malte Isberner (https://github.com/misberner).
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.misberner.buildergen.annotations;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Automatically generate a builder for the annotated instantiator.
 * <p>
 * An instantiator can either be a constructor of a top-level or <i>static</i> inner class,
 * or a static method. Annotating constructors of non-static inner classes or non-static methods
 * with this annotation will result in an error.
 * <p>
 * The type returned by the creation method will be determined as follows:
 * <ul>
 * <li>if the instantiator is a constructor, the return type will be the same as the defining class.
 * <li>if the instantiator is a static method, the return type will be the same as of this method.
 * </ul>
 * 
 * @author Malte Isberner <malte.isberner@gmail.com>
 *
 */
@Retention(RetentionPolicy.SOURCE)
@Target({ElementType.CONSTRUCTOR,ElementType.METHOD})
public @interface GenerateBuilder {
	
	/**
	 * The name of the generated builder. This field is only taken into account
	 * when the <code>name</code> attribute is set to the empty string. If this
	 * field is empty, the default builder name (see above) will be used.
	 */
	public String value() default "";
	/**
	 * The name of the generated builder. If this field is set to the empty string,
	 * the value of the <code>value</code> attribute is used, if this is specified and
	 * non-empty. Otherwise, the default builder name (see above) will be used.
	 */
	public String name() default "";
	/**
	 * The name of the package in which the builder is defined. If the empty string
	 * is specified, the package will be the same as that of the instantiator.
	 */
	public String packageName() default "";
	
	/**
	 * The prefix to use for getter methods. If a second value is specified, this will be used
	 * as an alternate prefix for <code>boolean</code> attributes. Specifying more than two
	 * values will result in a warning, but is not an error (only the first two values will be
	 * considered). Specify {@link AccessorMethods#SUPPRESS} to prevent getters from being generated
	 * by default.
	 */
	public String[] getterPrefix() default {"get", "is"};
	
	/**
	 * The prefix to use for setter methods. Specify {@link AccessorMethods#SUPPRESS} to prevent setters
	 * from being generated by default.
	 */
	public String setterPrefix() default "set";
	
	/**
	 * The prefix to use for with methods. Specify {@link AccessorMethods#SUPPRESS_WITHS} to prevent with methods
	 * from being generated by default.
	 */
	public String withPrefix() default "with";
	
	/**
	 * The class containing the default values for the options. If {@link Void} is specified,
	 * a class called "$BuilderDefaults" declared on the same level as the instantiator will be
	 * used if it exists.
	 */
	public Class<?> defaults() default Void.class;
	
	/**
	 * Whether or not the generated builder is a <code>public</code> class (<code>true</code> by default).
	 */
	public boolean builderPublic() default true;
	/**
	 * Whether or not the generated builder is a <code>final</code> class (<code>true</code> by default).
	 */
	public boolean builderFinal() default true;
	
	/**
	 * The default visibility of option attributes. The default is {@link Visibility#PRIVATE}. Specifying
	 * {@link Visibility#INHERIT} will result in a warning, but have the same effect {@link Visibility#PRIVATE}.
	 */
	public Visibility optionVisibility() default Visibility.PRIVATE;
	
	public String createName() default "create";
}
